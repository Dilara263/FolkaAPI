// <auto-generated />
using System;
using FolkaAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FolkaAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250824231540_FinalUserAndCouponSeeding")]
    partial class FinalUserAndCouponSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("FolkaAPI.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("FolkaAPI.Models.Coupon", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinOrderAmount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            Id = "IND10",
                            Description = "%10 İndirim Kuponu",
                            DiscountType = "Percentage",
                            DiscountValue = 0.10m,
                            ExpiryDate = new DateTime(2026, 8, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            MinOrderAmount = 50
                        },
                        new
                        {
                            Id = "FREEKARGO",
                            Description = "Ücretsiz Kargo Kuponu",
                            DiscountType = "Amount",
                            DiscountValue = 15m,
                            ExpiryDate = new DateTime(2027, 2, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            MinOrderAmount = 100
                        },
                        new
                        {
                            Id = "YAZINDIRIMI",
                            Description = "Yaz İndirimi %20",
                            DiscountType = "Percentage",
                            DiscountValue = 0.20m,
                            ExpiryDate = new DateTime(2025, 9, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            MinOrderAmount = 75
                        });
                });

            modelBuilder.Entity("FolkaAPI.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FolkaAPI.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FolkaAPI.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Category = "Çanta",
                            Description = "Yüksek kaliteli iplikle elde örülmüş, güzel ve dayanıklı bir bez çanta. Günlük kullanım için mükemmeldir.",
                            Image = "http://10.0.2.2:5227/images/totteBag.webp",
                            Name = "Hand-Knitted Tote Bag",
                            Price = "250 TL",
                            Stock = 8
                        },
                        new
                        {
                            Id = "2",
                            Category = "Takı",
                            Description = "Bu eşsiz, el yapımı püsküllü kolye ile tarzınıza bohem-şık bir dokunuş katın.",
                            Image = "http://10.0.2.2:5227/images/tassel.jpg",
                            Name = "Bohemian Tassel Necklace",
                            Price = "120 TL",
                            Stock = 15
                        },
                        new
                        {
                            Id = "3",
                            Category = "Çanta",
                            Description = "Zarif, el yapımı omuz çantası. Her kıyafetle uyum sağlar.",
                            Image = "https://picsum.photos/seed/bag2/400/400",
                            Name = "El Örgüsü Omuz Çantası",
                            Price = "350 TL",
                            Stock = 5
                        },
                        new
                        {
                            Id = "4",
                            Category = "Fular",
                            Description = "Güzel bir çiçek baskısına sahip, hafif ve yumuşak bir ipek fular. Çok yönlü ve şık.",
                            Image = "http://10.0.2.2:5227/images/fular.webp",
                            Name = "Silk Floral Scarf (Fular)",
                            Price = "150 TL",
                            Stock = 20
                        },
                        new
                        {
                            Id = "5",
                            Category = "Takı",
                            Description = "925 ayar gümüş, el işçiliği hayat ağacı kolye.",
                            Image = "https://picsum.photos/seed/necklace2/400/400",
                            Name = "Gümüş Hayat Ağacı Kolye",
                            Price = "450 TL",
                            Stock = 10
                        });
                });

            modelBuilder.Entity("FolkaAPI.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "04f97db4-3c37-4e07-a46a-1630c9c004b7",
                            Address = "Yeni Mah",
                            Email = "dilaraemail",
                            Name = "Dilara Dereli",
                            PasswordHash = "$2a$11$E3Ytpo3XyvjWEz.DOg.cmU1jYv2cv6JyZUTtUPWITG",
                            PhoneNumber = "5419187223"
                        },
                        new
                        {
                            Id = "9befa110-b89c-4b6e-a1be-f5a17b7efddd",
                            Address = "sixsos",
                            Email = "emoemail",
                            Name = "emo",
                            PasswordHash = "$2a$11$6771O0X6P0BxBV0tV0UukKzLbqnMT48O0Xhng4q76WUnMBDJGO",
                            PhoneNumber = "16165"
                        });
                });

            modelBuilder.Entity("FolkaAPI.Models.UserCoupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AcquiredDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CouponId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCoupons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcquiredDate = new DateTime(2025, 8, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CouponId = "IND10",
                            IsUsed = false,
                            UserId = "04f97db4-3c37-4e07-a46a-1630c9c004b7"
                        },
                        new
                        {
                            Id = 2,
                            AcquiredDate = new DateTime(2025, 8, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CouponId = "YAZINDIRIMI",
                            IsUsed = false,
                            UserId = "04f97db4-3c37-4e07-a46a-1630c9c004b7"
                        },
                        new
                        {
                            Id = 3,
                            AcquiredDate = new DateTime(2025, 8, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CouponId = "FREEKARGO",
                            IsUsed = false,
                            UserId = "9befa110-b89c-4b6e-a1be-f5a17b7efddd"
                        });
                });

            modelBuilder.Entity("FolkaAPI.Models.UserFavorite", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("FolkaAPI.Models.CartItem", b =>
                {
                    b.HasOne("FolkaAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FolkaAPI.Models.Order", b =>
                {
                    b.HasOne("FolkaAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FolkaAPI.Models.OrderItem", b =>
                {
                    b.HasOne("FolkaAPI.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FolkaAPI.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FolkaAPI.Models.UserCoupon", b =>
                {
                    b.HasOne("FolkaAPI.Models.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FolkaAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FolkaAPI.Models.UserFavorite", b =>
                {
                    b.HasOne("FolkaAPI.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FolkaAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FolkaAPI.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
